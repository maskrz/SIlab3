/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controllers.Reversi;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.ButtonGroup;
import structures.Node;

/**
 *
 * @author Skrzypek
 */
public class ReversiFrame extends javax.swing.JFrame {

    /**
     * Creates new form ReversiFrame
     */
    public int[][] tab;
    int player;
    int alg = 0;
    boolean started;
    boolean pawnAmount1;
    boolean moves1;
    boolean pawnPositions1;
    boolean pawnAmount2;
    boolean moves2;
    boolean pawnPositions2;
    boolean first;
    boolean p1;
    boolean p2;
    int level;
    Reversi rev;
    Node root;
    int left;

    public ReversiFrame() {
        initComponents();
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        ButtonGroup rg1 = new ButtonGroup();
        rg1.add(radioC1);
        rg1.add(radioH1);
        ButtonGroup rg2 = new ButtonGroup();
        rg2.add(radioC2);
        rg2.add(radioH2);


        board.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (started) {
                    if (canMove(tab, player)) {

                        Point b = e.getPoint();
                        int x = (int) b.getX();
                        int y = (int) b.getY();
                        x /= 70;
                        y /= 70;

                        if (tab[x][y] == 0) {
                            //System.out.println(canSetPawn(x, y, player, tab));
                            boolean[] td = new boolean[8];
                            if (rev.canSetPawn(x, y, player, tab, td)) {
                                rev.setPawn(x, y, player, tab, td);
                                left--;
                                drawBoard();
                                setFlag(x, y);
                                player *= -1;
                                Node n = root.getChoosenNode(x, y);
                                root = n;
                                root.reduceDepth();
                                if (left > level - 1) {
                                    rev.addTreeLevel(root, player);
                                }
                                if (alg != 3) {
                                    root.calcEval(alg);
                                } //
                                else {
                                    root.setEval(root.alphabeta(Integer.MIN_VALUE, Integer.MAX_VALUE, true));
                                }
                                updateResults();

                                // komp
                                if (canMove(tab, player)) {
                                    if (!p2 || !p1) {
                                        computeMove();
                                    }
                                } else {
                                    player *= -1;
                                }
                            }
                        }

                        //System.out.println(rev.boardRating(tab));
                    } else {
                        player *= -1;
                        if (!p2) {
                            computeMove();
                        }
                    }

                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        board = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        labelAct = new javax.swing.JLabel();
        labelRed = new javax.swing.JLabel();
        labelBlue = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        labelLevel = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jButton2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        radioH1 = new javax.swing.JRadioButton();
        radioC1 = new javax.swing.JRadioButton();
        checkPA1 = new javax.swing.JCheckBox();
        checkPP1 = new javax.swing.JCheckBox();
        checkMA1 = new javax.swing.JCheckBox();
        checkPA2 = new javax.swing.JCheckBox();
        radioH2 = new javax.swing.JRadioButton();
        radioC2 = new javax.swing.JRadioButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        checkMA2 = new javax.swing.JCheckBox();
        checkPP2 = new javax.swing.JCheckBox();
        comboAlg = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        board.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout boardLayout = new javax.swing.GroupLayout(board);
        board.setLayout(boardLayout);
        boardLayout.setHorizontalGroup(
            boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 558, Short.MAX_VALUE)
        );
        boardLayout.setVerticalGroup(
            boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 558, Short.MAX_VALUE)
        );

        jButton1.setText("Na pelnej!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Aktualny:");

        jLabel2.setText("Czerwonych:");

        jLabel3.setText("Niebieskich:");

        labelAct.setText("Czerwony");

        labelRed.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelRed.setText("2");

        labelBlue.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelBlue.setText("2");

        jLabel4.setText("Poziom trudnosci:");

        labelLevel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelLevel.setText("1");

        jSlider1.setMaximum(5);
        jSlider1.setMinimum(1);
        jSlider1.setValue(1);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jButton2.setText("repaint");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setText("Gracz 1");

        radioH1.setSelected(true);
        radioH1.setText("Człowiek");

        radioC1.setText("Komputer");

        checkPA1.setSelected(true);
        checkPA1.setText("Liczba pionków");

        checkPP1.setText("Pozycje pionków");

        checkMA1.setText("Liczba ruchów");

        checkPA2.setSelected(true);
        checkPA2.setText("Liczba pionków");

        radioH2.setSelected(true);
        radioH2.setText("Człowiek");

        radioC2.setText("Komputer");

        jLabel6.setText("Gracz 1");

        checkMA2.setText("Liczba ruchów");

        checkPP2.setText("Pozycje pionków");

        comboAlg.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Minimax", "Suma gałęzi", "Minimalizacja strat", "Alfa-beta" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(board, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelAct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelRed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelBlue, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelLevel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2)
                    .addComponent(jLabel5)
                    .addComponent(radioH1)
                    .addComponent(radioC1)
                    .addComponent(checkPA1)
                    .addComponent(checkPP1)
                    .addComponent(checkMA1)
                    .addComponent(jLabel6)
                    .addComponent(radioH2)
                    .addComponent(radioC2)
                    .addComponent(checkPA2)
                    .addComponent(checkPP2)
                    .addComponent(checkMA2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(comboAlg, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(labelAct))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(labelRed))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(labelBlue))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(labelLevel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboAlg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioH1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioC1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkPA1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkPP1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkMA1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioH2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioC2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkPA2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkPP2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkMA2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2))
                    .addComponent(board, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        tab = new int[8][8];
        tab[3][3] = -1;
        tab[3][4] = 1;
        tab[4][3] = 1;
        tab[4][4] = -1;
        drawBoard();
        moves1 = checkMA1.isSelected();
        pawnAmount1 = checkPA1.isSelected();
        pawnPositions1 = checkPP1.isSelected();
        moves2 = checkMA2.isSelected();
        pawnAmount2 = checkPA2.isSelected();
        pawnPositions2 = checkPP2.isSelected();
        alg = comboAlg.getSelectedIndex();
        left = 60;
        player = 1;
        p1 = (radioH1.isSelected()) ? true : false;
        p2 = (radioH2.isSelected()) ? true : false;
        //first = checkFirst.isSelected();
        started = false;
        pawnAmount1 = true;
        pawnPositions1 = true;
        moves1 = true;
        rev = new Reversi(moves1, pawnAmount1, pawnPositions1, moves2, pawnAmount2, pawnPositions2);
        root = new Node(0, tab);
        drawBoard();
        level = jSlider1.getValue();
        for (int i = 0; i < level; i++) {
            rev.addTreeLevel(root, player);
        }
        started = true;
        if (alg != 3) {
            root.calcEval(alg);
        } //
        else {
            root.alphabeta(Integer.MIN_VALUE, Integer.MAX_VALUE, true);
        }

        if (!p1) {
            computeMove();
        }
        while (!p1 && !p2 && !rev.isFinished(tab)) {
            computeMove();
//            System.out.println(rev.isFinished(tab));
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        labelLevel.setText("" + jSlider1.getValue());
    }//GEN-LAST:event_jSlider1StateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        drawBoard();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReversiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReversiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReversiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReversiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ReversiFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel board;
    private javax.swing.JCheckBox checkMA1;
    private javax.swing.JCheckBox checkMA2;
    private javax.swing.JCheckBox checkPA1;
    private javax.swing.JCheckBox checkPA2;
    private javax.swing.JCheckBox checkPP1;
    private javax.swing.JCheckBox checkPP2;
    private javax.swing.JComboBox comboAlg;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JLabel labelAct;
    private javax.swing.JLabel labelBlue;
    private javax.swing.JLabel labelLevel;
    private javax.swing.JLabel labelRed;
    private javax.swing.JRadioButton radioC1;
    private javax.swing.JRadioButton radioC2;
    private javax.swing.JRadioButton radioH1;
    private javax.swing.JRadioButton radioH2;
    // End of variables declaration//GEN-END:variables

    private void drawBoard() {

        drawLines();
        drawPawns();

    }

    private void drawLines() {
        int act = 0;
        Graphics g = board.getGraphics();
        g.setColor(new Color(240, 240, 240));
        g.fillRect(0, 0, board.getWidth(), board.getHeight());
        g.setColor(Color.BLACK);
        for (int i = 0; i < 9; i++) {
            g.drawLine(0, act, 570, act);
            g.drawLine(act, 0, act, 570);
            act += 70;
        }
    }

    private void drawPawns() {
        Graphics g = board.getGraphics();
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (tab[i][j] == 1) {
                    g.setColor(Color.red);
                    g.fillOval(i * 70, j * 70, 70, 70);
                }
                if (tab[i][j] == -1) {
                    g.setColor(Color.blue);
                    g.fillOval(i * 70, j * 70, 70, 70);
                }
            }
        }
    }

    private void setFlag(int x, int y) {
        Graphics g = board.getGraphics();
        g.fillOval(x * 70 + 25, y * 70 + 25, 20, 20);
    }

    private void updateResults() {
        String actuall = (player == 1) ? "Czerwony" : "Niebieski";
        labelAct.setText(actuall);
        int[] res = rev.result(tab);
        labelRed.setText("" + res[0]);
        labelBlue.setText("" + res[1]);
    }

    private void computeMove() {
        if (!canMove(tab, player)) {
//            System.out.println("zmiana"+player);
            player *= -1;
            for (int i = 0; i < level; i++) {

                rev.addTreeLevel(root, player);
            }
        }
//        System.out.println(player);
//        System.out.println(root.bestPath(player));
//        System.out.println(player);
        try {
            boolean[] td = new boolean[8];
            String[] m = root.bestPath(player).split(" ");
            int x = Integer.valueOf(m[0]);
            int y = Integer.valueOf(m[1]);
//            System.out.println(x + " "+ y);
//            System.out.println(rev.canSetPawn(x, y, player, tab, td));
            rev.canSetPawn(x, y, player, tab, td);
            rev.setPawn(x, y, player, tab, td);
            left--;
            drawBoard();
            setFlag(x, y);
            player *= -1;
            Node n = root.getChoosenNode(x, y);
            root = n;
            root.reduceDepth();
            if (left > level - 1) {
                rev.addTreeLevel(root, player);
            }
            updateResults();
        } catch (Exception e) {

            for (int i = 0; i < level; i++) {

                rev.addTreeLevel(root, player);
            }
        }

    }

    private boolean canMove(int[][] t, int p) {
        boolean[] td = new boolean[8];
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (rev.canSetPawn(i, j, p, t, td)) {
//                    System.out.println(player + " sdsadfgs " + i + " sdadasdas " + j);
                    return true;
                }
                td = new boolean[8];
            }
        }
        return false;

    }
}
