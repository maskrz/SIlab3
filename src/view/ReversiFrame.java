/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

/**
 *
 * @author Skrzypek
 */
public class ReversiFrame extends javax.swing.JFrame {

    /**
     * Creates new form ReversiFrame
     */
    public int[][] tab;
    int player;
    boolean started;
    public boolean[] td;

    public ReversiFrame() {
        initComponents();
        tab = new int[8][8];
        tab[3][3] = 1;
        tab[3][4] = -1;
        tab[4][3] = -1;
        tab[4][4] = 1;
        td = new boolean[8];
        player = 1;
        started = false;
        board.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (started) {
                    Point b = e.getPoint();
                    int x = (int) b.getX();
                    int y = (int) b.getY();
                    x /= 70;
                    y /= 70;

                    if (tab[x][y] == 0) {
                        System.out.println(canSetPawn(x, y, player, tab));
                        setPawn(x, y);
                    }
                    
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        board = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        board.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout boardLayout = new javax.swing.GroupLayout(board);
        board.setLayout(boardLayout);
        boardLayout.setHorizontalGroup(
            boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 558, Short.MAX_VALUE)
        );
        boardLayout.setVerticalGroup(
            boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 558, Short.MAX_VALUE)
        );

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(236, 236, 236)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(board, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(345, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(board, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addComponent(jButton1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        drawBoard();
        started = true;
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReversiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReversiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReversiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReversiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ReversiFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel board;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables

    private void drawBoard() {
        drawLines();
        drawPawns();
    }

    private void drawLines() {
        int act = 0;
        Graphics g = board.getGraphics();
        for (int i = 0; i < 9; i++) {
            g.drawLine(0, act, 570, act);
            g.drawLine(act, 0, act, 570);
            act += 70;
        }
    }

    private void drawPawns() {
        Graphics g = board.getGraphics();
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (tab[i][j] == 1) {
                    g.setColor(Color.red);
                    g.fillOval(i * 70, j * 70, 70, 70);
                }
                if (tab[i][j] == -1) {
                    g.setColor(Color.blue);
                    g.fillOval(i * 70, j * 70, 70, 70);
                }
            }
        }
    }

    private void setPawn(int x, int y) {
        if (canSetPawn(x, y, player, tab)) {
            tab[x][y] = player;
            recalcBoard(x, y, player, td);
            for(int i = 0; i < 8; i++) td[i] = false;
            drawBoard();
            player = (player == 1) ? -1 : 1;
        }
    }

    private boolean canSetPawn(int x, int y, int p, int[][] t) {
        boolean result = false;

        int cx = x;
        int cy = y;
        int np = (p == 1) ? -1 : 1;

        // lewo
        x--;
        while (x >= 0 && t[x][y] == np) {
            x--;
        }
        x++;
        if (x != cx && x!= 0 && t[x - 1][y] == p) {
            result = true;
            td[0] = true;
        }
        x = cx;


        //prawo
        x++;
        while (x < 8 && t[x][y] == np) {
            x++;
        }
        x--;
        if (x != cx && x!=7 && t[x + 1][y] == p) {
            result = true;
            td[1] = true;
        }
        x = cx;
        
        
        //gora
        y--;
        while (y >= 0 && t[x][y] == np) {
            y--;
        }
        y++;
        if (y != cy && y != 0 && t[x][y-1] == p) {
            result = true;
            td[2] = true;
        }
        y = cy;
        
        
        //dol
        y++;
        while (y < 8 && t[x][y] == np) {
            y++;
        }
        y--;
        if (y != cy && y!= 7 && t[x][y+1] == p) {
            result = true;
            td[3] = true;
        }
        y = cy;
        
        
        
        //skos1
        x--;
        y--;
        while (x >= 0 && y >= 0 && t[x][y] == np) {
            x--;
            y--;
        }
        x++;
        y++;
        if (x != cx &&  y != cy && x!= 0 && y != 0 && t[x - 1][y-1] == p) {
            result = true;
            td[4] = true;
        }
        x = cx;
        y = cy;
        
        
        
        //skos2
        x++;
        y++;
        while (x < 8 && y < 8 && t[x][y] == np) {
            x++;
            y++;
        }
        x--;
        y--;
        if (x != cx &&  y != cy && x !=7 && y != 7 && t[x + 1][y+1] == p) {
            result = true;
            td[5] = true;
        }
        x = cx;
        y = cy;
        
        
        
        //skos3
        x--;
        y++;
        while (x >= 0 && y < 8 && t[x][y] == np) {
            x--;
            y++;
        }
        x++;
        y--;
        if (x != cx &&  y != cy && y !=7 && x!=0 && t[x - 1][y+1] == p) {
            result = true;
            td[6] = true;
        }
        x = cx;
        y = cy;
        
        
        
        //skos4
        x++;
        y--;
        while (x < 8 && y >= 0 && t[x][y] == np) {
            x++;
            y--;
        }
        x--;
        y++;
        if (x != cx &&  y != cy && x !=7 && y!=0 && t[x + 1][y-1] == p) {
            result = true;
            td[7] = true;
        }
        x = cx;
        y = cy;
        
        
        

        return result;
    }

    private void recalcBoard(int x, int y, int player1, boolean[] td) {
        int cx = x;
        int cy = y;
        System.out.println("");
//        for(int i = 0; i < 8; i++) System.out.print(td[i]);
        if(td[0]) {
            x--;
            while(tab[x][y] != player1) {
                tab[x][y] = player;
                x--;
            }
            x = cx;
        }
        
        if(td[1]) {
            x++;
            while(tab[x][y] != player1) {
                tab[x][y] = player;
                x++;
            }
            x = cx;
        }
        
        if(td[2]) {
            y--;
            while(tab[x][y] != player1) {
                tab[x][y] = player;
                y--;
            }
            y = cy;
        }
        
        if(td[3]) {
            y++;
            while(tab[x][y] != player1) {
                tab[x][y] = player;
                y++;
            }
            y = cy;
        }
        
        if(td[4]) {
            x--;
            y--;
            while(tab[x][y] != player1) {
                tab[x][y] = player;
                x--;
                y--;
            }
            x = cx;
            y = cy;
        }
        
        if(td[5]) {
            x++;
            y++;
            while(tab[x][y] != player1) {
                tab[x][y] = player;
                x++;
                y++;
            }
            x = cx;
            y = cy;
        }
        
        if(td[6]) {
            x--;
            y++;
            while(tab[x][y] != player1) {
                tab[x][y] = player;
                x--;
                y++;
            }
            x = cx;
            y = cy;
        }
        
        if(td[7]) {
            x++;
            y--;
            while(tab[x][y] != player1) {
                tab[x][y] = player;
                x++;
                y--;
            }
            x = cx;
            y = cy;
        }
        
    }
}
